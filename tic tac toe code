import pygame as pg
import sys
import time
from pygame.locals import *

# declaring the global variables
XO = 'x'
winner = None
draw = None

# to set width of the game window
width = 600
height = 600

# colors
text_color = (0,0,0)
white = (255, 255, 255) # Background
line_color = (231, 125, 113) # Coral Pink for Grid lines
x_color = (246, 122, 255)  # Ultra Pink for X
o_color = (113, 215, 231)  # Non Photo Blue for O
button_color = (231, 125, 113)  # Coral Pink for Play Again button

# setting up a 3 * 3 board in canvas
board = [[None] * 3, [None] * 3, [None] * 3]

# initializing the pygame window
pg.init()

# setting fps manually
fps = 30

# this is used to track time
CLOCK = pg.time.Clock()

# this method is used to build the infrastructure of the display
screen = pg.display.set_mode((width, height + 150), 0, 32)

# setting up a nametag for the game window
pg.display.set_caption("Tic Tac Toe")


def draw_x(posx, posy):
    """Draw an X at the specified position with rounded corners"""
    # Top-left to bottom-right diagonal
    pg.draw.line(screen, x_color,
                 (posx + 40, posy + 40),
                 (posx + 160, posy + 160), 15)  # Rounded line cap

    # Top-right to bottom-left diagonal
    pg.draw.line(screen, x_color,
                 (posx + 160, posy + 40),
                 (posx + 40, posy + 160), 15)  # Rounded line cap

    # Draw rounded end points
    pg.draw.circle(screen, x_color, (posx + 40, posy + 40), 7)  # Top-left point
    pg.draw.circle(screen, x_color, (posx + 160, posy + 40), 7)  # Top-right point
    pg.draw.circle(screen, x_color, (posx + 40, posy + 160), 7)  # Bottom-left point
    pg.draw.circle(screen, x_color, (posx + 160, posy + 160), 7)  # Bottom-right point


def draw_o(posx, posy):
    """Draw an O at the specified position"""
    pg.draw.circle(screen, o_color,
                   (posx + 100, posy + 100), 60, 15)


def draw_play_again_button():
    """Draw a play again button"""
    # Outer black border
    border_rect = pg.Rect(width // 2 - 105, height + 60, 210, 40)
    pg.draw.rect(screen, (255, 255, 255), border_rect)  # Black border

    # Inner button
    button_rect = pg.Rect(width // 2 - 100, height + 65, 200, 30)
    pg.draw.rect(screen, button_color, button_rect)
    pg.draw.rect(screen, line_color, button_rect, 3)

    font = pg.font.Font(None, 36)
    text = font.render("Play Again", True, white)
    text_rect = text.get_rect(center=button_rect.center)
    screen.blit(text, text_rect)

    return button_rect


def game_initiating_window():
    # displaying white screen
    screen.fill(white)

    # drawing vertical lines extending to the full height including status box
    pg.draw.line(screen, line_color, (width / 3, 0), (width / 3, height + 100), 7)
    pg.draw.line(screen, line_color, (width / 3 * 2, 0), (width / 3 * 2, height + 100), 7)

    # drawing horizontal lines
    pg.draw.line(screen, line_color, (0, height / 3), (width, height / 3), 7)
    pg.draw.line(screen, line_color, (0, height / 3 * 2), (width, height / 3 * 2), 7)
    draw_status()

def draw_status():
    global draw

    if winner is None:
        message = XO.upper() + "'s Turn"
    else:
        message = winner.upper() + " Won !"
    if draw:
        message = "Game Draw !"

    # setting a font object
    font = pg.font.Font(None, 30)

    # setting the font properties like color and width of the text
    text = font.render(message, 1, (255, 255, 255))

    # copy the rendered message onto the board
    screen.fill(line_color, (0, height + 10, width, 100))
    text_rect = text.get_rect(center=(width / 2, height + 50))
    screen.blit(text, text_rect)
    pg.display.update()

def check_win():
    global board, winner, draw

    # checking for winning rows
    for row in range(0, 3):
        if((board[row][0] == board[row][1] == board[row][2]) and (board[row][0] is not None)):
            winner = board[row][0]
            # Use x_color or o_color based on the winner
            win_color = x_color if winner == 'x' else o_color
            pg.draw.line(screen, win_color,
                        (0, (row + 1)*height / 3 - height / 6),
                        (width, (row + 1)*height / 3 - height / 6),
                        4)
            break

    # checking for winning columns
    for col in range(0, 3):
        if((board[0][col] == board[1][col] == board[2][col]) and (board[0][col] is not None)):
            winner = board[0][col]
            # Use x_color or o_color based on the winner
            win_color = x_color if winner == 'x' else o_color
            pg.draw.line(screen, win_color,
                        ((col + 1) * width / 3 - width / 6, 0),
                        ((col + 1) * width / 3 - width / 6, height), 4)
            break

    # check for diagonal winners
    if (board[0][0] == board[1][1] == board[2][2]) and (board[0][0] is not None):
        # game won diagonally left to right
        winner = board[0][0]
        win_color = x_color if winner == 'x' else o_color
        pg.draw.line(screen, win_color, (50, 50), (width-50, height-50), 4)

    if (board[0][2] == board[1][1] == board[2][0]) and (board[0][2] is not None):
        # game won diagonally right to left
        winner = board[0][2]
        win_color = x_color if winner == 'x' else o_color
        pg.draw.line(screen, win_color, (width-50, 50), (50, height-50), 4)

    if(all([all(row) for row in board]) and winner is None):
        draw = True
    draw_status()

def drawXO(row, col):
    global board, XO

    # Calculate position with larger grid spaces
    posx = (col - 1) * (width / 3)
    posy = (row - 1) * (height / 3)

    # setting up the required board value to display
    board[row-1][col-1] = XO

    if(XO == 'x'):
        draw_x(posx, posy)
        XO = 'o'
    else:
        draw_o(posx, posy)
        XO = 'x'
    pg.display.update()

def user_click():
    # get coordinates of mouse click
    x, y = pg.mouse.get_pos()

    # get column of mouse click (1-3)
    if x < width / 3:
        col = 1
    elif x < width / 3 * 2:
        col = 2
    elif x < width:
        col = 3
    else:
        col = None

    # get row of mouse click (1-3)
    if y < height / 3:
        row = 1
    elif y < height / 3 * 2:
        row = 2
    elif y < height:
        row = 3
    else:
        row = None

    # after getting the row and col,
    # we need to draw the images at
    # the desired positions
    if row and col and board[row-1][col-1] is None:
        global XO
        drawXO(row, col)
        check_win()

def reset_game():
    global board, winner, XO, draw
    XO = 'x'
    draw = False
    game_initiating_window()
    winner = None
    board = [[None] * 3, [None] * 3, [None] * 3]


game_initiating_window()

while (True):
    for event in pg.event.get():
        if event.type == QUIT:
            pg.quit()
            sys.exit()
        elif event.type == MOUSEBUTTONDOWN:
            if not winner and not draw:
                user_click()
            elif winner or draw:
                # Check if Play Again button is clicked
                play_again_rect = draw_play_again_button()
                if play_again_rect.collidepoint(event.pos):
                    reset_game()

        # Draw Play Again button when game is over
        if winner or draw:
            play_again_rect = draw_play_again_button()

    pg.display.update()
    CLOCK.tick(fps)
